{"index_struct": {"__type__": "list", "__data__": {"index_id": "b14ce59f-9669-49a3-909b-6d1aae3a4b26", "summary": null, "nodes": ["4fd6bd4a-fcc9-4dd9-9129-a92484e6ffed", "3ace8105-5135-4ab7-8dc4-7e5b276fc6a0", "8bc0158a-bb67-456c-af8c-fcfc363569eb", "c65eeb41-7ed5-407b-9b54-d4588ee03c17", "59f80929-c45e-4356-b7c9-df3f36658842", "0b0e75c0-a370-4fdc-9fce-818363573d60", "33dc4a9f-b32b-4a27-bf61-ef33d1250337", "1ca2d8f1-05b3-48d5-b259-b4d68ee3fae1", "55a442f4-8340-4ee2-a4a3-d5e467baa885", "cac37684-2340-4de3-9881-e450cd54577f", "909b6967-6e74-4b2b-ac2e-76c6b0a8f4d1", "8d9428c0-8000-4b9d-862f-e9285e4bd500", "5a878885-a350-490e-8f34-b240bc055eba", "a3a3c26d-0250-43f3-af88-b81fbd7777ad", "219c3cea-3bfd-4e2a-b3eb-08cfd8c3fd7b", "6be6f343-8ae8-463c-929c-32d118881e3d", "b3ea61ec-adb3-4c42-96d8-2b21b37569df", "1b58872b-38ea-49ed-946e-14984e05e15a", "35b5f125-0ff6-4705-aea5-3ffa73e865bf", "34083a14-1814-4a40-aff5-0c685ae3d616", "2cbcdc83-1b04-4811-bb4d-4f29426ec0d0", "56c10147-3cd4-40cc-9ff8-d9ec4e7353e0", "2fc8dc94-f721-4351-a1b1-688862db6d76", "294e8906-b2c0-4b42-89e5-a9aed21fcca5", "9a09fc9e-b58d-4822-8566-1d2077645e0b", "aacd864d-17a5-4f85-8b8d-7648ed34a190", "2f8aaba1-7384-40ef-a191-546411b04627", "63422ac4-b245-4389-91bd-260cdd2b2f35", "1b1741d3-7748-4d99-a7c0-4889dbbb9edc", "9b016c1d-c31b-453b-8680-705feb908e15", "abbf6083-74f3-45d9-a693-93169636a5fe", "0022cbf7-1f20-421b-9b33-64151a5d1d23", "ced053d1-bd4a-41ba-a8db-21430bfd9252", "d445f326-e45f-4238-bd9e-34f8de44edc6", "c5999b43-0c4a-4343-99d8-077896fcb626", "5afc94f7-cc1b-48a6-ae9f-5b4c7425f34b", "481d25e1-5bba-4273-bae9-cf1aa643739e", "d428bb84-fb71-45cb-8bee-ad22617292ec", "5a2b739f-49da-4758-b04a-1d87aaead6c3", "0ce64ad4-bfa1-4a43-9ddd-4640e08a02a7", "0b0e162c-6a93-4257-9366-acd2432ca738", "c50b84ce-553c-4edc-a78d-9e0e02005061", "49d97ceb-2281-4a7c-8dbb-3afb0baa3929", "174217e8-8274-49ed-956f-bb31873a9ccf", "628afe8a-1d55-4545-9b4c-6adf4bc90774", "0c7585ae-30fd-4183-b81f-e6cb538fc8b2", "bf92cfae-8b4e-40a1-ae9d-bc176b072f40", "e65e5847-40f3-4631-8f6b-0342fc83c372"]}}, "docstore": {"docs": {"4fd6bd4a-fcc9-4dd9-9129-a92484e6ffed": {"text": "Last Upda ted on 22nd September 2022John Doe\n\uf095 0000 000000 \uf1fa f akegmail@gmail.c om\nEducation\nUNIVERSITY OF LEEDS\nMS in Data Sci ence/ Analysis\n\uf073Sep2022 \uf041Leeds,UK\n\u2022InternationalMasters\nExcellenceScholarship\n\u2022ExpectingaFirstclassdegree\n\u2022WorkingasPALMentor\nMITS, GW ALIOR\nB Tech in Comput er Science\n\uf073Sep2020 \uf041Gwalior,MP\nGraduatedwithDistinction\nLinks\n\uf09bGitHubthemagicalmammal\n\uf0e1Linkedin themagicalmammal\nCoursework\nGRADUA TE\nDataScience\nProgrammingforDataScience\nKnowledgeRepresentationand\nReasoning\nStatisticalTheoryandMethods\nLearningSkillsthroughCaseStudies\nArtificialIntelligence\nMachineLearning\nStatisticalLearning\nDissertation:", "doc_id": "4fd6bd4a-fcc9-4dd9-9129-a92484e6ffed", "embedding": null, "doc_hash": "fd785ac441d89ca6b53ef320f8d1864e52daa52d8d8e1a4f22fe7a420367f40e", "extra_info": null, "node_info": {"start": 0, "end": 629}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "3": "3ace8105-5135-4ab7-8dc4-7e5b276fc6a0"}, "__type__": "1"}, "3ace8105-5135-4ab7-8dc4-7e5b276fc6a0": {"text": "Machinelearning\nmethodsforsolubilitypredictionin\nchemicalexperiments\nSkills\nPROGRAMMING\nPython\u2022R\u2022PHP\u2022C/C++\u2022HTML/CSS\u2022\nJavaScript\u2022SQL\nMISCELLANEOUS\nShell\u2022L ATEX\u2022Tableau\u2022MicrosoftOffice\n\u2022Firebase\u2022Git\nHonors\nEXCELLENCE SCHOLARSHIP\nUniversity of leeds\nAwardedtointernationalstudents\nwhohaveachievedtheequivalentof\naUKfirstclassbachelors\u2019degree.\nINDUSTRIAL VISIT\nInfosys Pune\nIwasasoneofthestudentsfor\nindustrialtraining,where28students\nwerechosenoutof2000.Experience\nSOFTW ARE ENGINEER\nIndian Institute of Technology\n\uf073Sep2020\u2013Aug2021 \uf041Indore,MP\n\u2022UsingYolotoboosttheaccuracyoflowlightsituationsin\nmobilenetv3\n\u2022UsingBashscriptsandLinuxtoolstoautomateandoptimizethedata\nhandlingfortrafficsigns.\nMACHINE LEARNING", "doc_id": "3ace8105-5135-4ab7-8dc4-7e5b276fc6a0", "embedding": null, "doc_hash": "0defaf4f2eb2c4f9a3ebbe8bde234a3ef8e46d1f52f9ea04caaf3b365226a275", "extra_info": null, "node_info": {"start": 630, "end": 1333}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "4fd6bd4a-fcc9-4dd9-9129-a92484e6ffed", "3": "8bc0158a-bb67-456c-af8c-fcfc363569eb"}, "__type__": "1"}, "8bc0158a-bb67-456c-af8c-fcfc363569eb": {"text": "LEARNING INTERN\nRaja Ramanna Centre for Advanced Technology\n\uf073Apr2020\u2013Aug2020 \uf041Indore,MP\n\u2022UsingGeneticalgorithmdesignedamodeltodetectthe\ncrossover/mutationingenewhichisportableforscheduling\nscenariosscenarios.\nWEB DEVELOPMENT INTERN\nRaja Ramanna Centre for Advanced Technology\n\uf073Jan2020\u2013Feb2020 \uf041Indore,MP\n\u2022DesignedthedynamicwebsiteusingPHPfordatavisualization\n(Angular5andNodeJs)ofparticleacceleratorforinternalusage.\n\u2022WorkedonAmChartstodisplaylivedatastreamsandusedstatistical\ntoolsforcomputationandunderstandingofdata.\nWEB DEVELOPMENT INTERN\nRaja Ramanna Centre for Advanced Technology\n\uf073Jun2019\u2013Jul2019", "doc_id": "8bc0158a-bb67-456c-af8c-fcfc363569eb", "embedding": null, "doc_hash": "34bcf9a1eb7b0086a2a52aa73e6bee84e4898d22fcda8454de1a8c4b8987e5e5", "extra_info": null, "node_info": {"start": 1326, "end": 1929}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "3ace8105-5135-4ab7-8dc4-7e5b276fc6a0", "3": "c65eeb41-7ed5-407b-9b54-d4588ee03c17"}, "__type__": "1"}, "c65eeb41-7ed5-407b-9b54-d4588ee03c17": {"text": "Ramanna Centre for Advanced Technology\n\uf073Jun2019\u2013Jul2019 \uf041Indore,MP\n\u2022UsingDjangotoconnectwithSQLbackendwithSQLServer2012.\n\u2022ThewebpageismadeoutofAngularJSwithUIelementsfrom\nMaterialize.\nCompetitions\nCOMPLEX LEVEL\nSmart India Hackathon\n\uf073Jan2019\u2013Feb2019 \uf041Bhubaneshwar,Orissa\n\u2022Wehadateamof6peopleunderthealias\u2019Cicada3301\u2019everyonehad\ndifferentskillsetswemadeawebsitewhichwasconnectedtoa\nblockchainnetworkonEthereumwhichwassetuponthenetworkof\nourpersonalcomputers.\n\u2022Afterpassingallthethreerounds,ourteamwasdeclaredthewinner\nofourquestionset. Wewonalumpsumof1lakh\u20b9(s).\nRecentProjects\nIPL ANAL YSIS\nUniversity of Leeds\n\uf073Nov2021\u2013Dec2021", "doc_id": "c65eeb41-7ed5-407b-9b54-d4588ee03c17", "embedding": null, "doc_hash": "3a51e91f3371c125031cd296a1bddbb05b83e2266cd7494a99834928ce974eb3", "extra_info": null, "node_info": {"start": 1887, "end": 2513}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "8bc0158a-bb67-456c-af8c-fcfc363569eb", "3": "59f80929-c45e-4356-b7c9-df3f36658842"}, "__type__": "1"}, "59f80929-c45e-4356-b7c9-df3f36658842": {"text": "ANAL YSIS\nUniversity of Leeds\n\uf073Nov2021\u2013Dec2021 \uf041Leeds,UK\nAprojectundertheUniversityofLeedstoanalysedatafrom2008to2015\nanddiscoverpatternsinthedatasuchastrends,co\u2011relations,probabilities,\nandusedtoolssuchasmatplotlib,Pandas,Seabornfordatavisualization.\nSTUDY OF THE BEHA VIOUR OF SERIAL KILLERS\u2019\nUniversity of Leeds\n\uf073Nov2021\u2013Dec2021 \uf041Leeds,UK\nThestudyofthebehaviourofserialkillerswithdifferentmotivessuchas\nConvenience(didnotwantchildren/spouse),EnjoymentorPowerand\nEscapeoravoidingarrest.\nExp erience\nApril 2017 - Machine Learning Engineer Bell\nPresent\u2022Focused on developing machine learning models, production de-\nployment, testing, scaling\n\u2022Projects: SMS spam detection, Robocall detection\nTools: Kafka, Flume, Spark, Hive, Solr, Jupyter Lab,", "doc_id": "59f80929-c45e-4356-b7c9-df3f36658842", "embedding": null, "doc_hash": "142ca4efcbe809f7af6441ea811dfb73588f12bb23b1d1d9d3578214d216ebcc", "extra_info": null, "node_info": {"start": 2522, "end": 3266}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "c65eeb41-7ed5-407b-9b54-d4588ee03c17", "3": "0b0e75c0-a370-4fdc-9fce-818363573d60"}, "__type__": "1"}, "0b0e75c0-a370-4fdc-9fce-818363573d60": {"text": "Flume, Spark, Hive, Solr, Jupyter Lab, Kubernetes,\nDocker, GitLab CI / CD\nAwards: Merit Gold (3x), Merit Platinum (2x)\n\u2022Helped pioneer automated deployments of data pipelines using CI\n/ CD, enabling faster and more portable deployments\n\u2022Presented several talks on Machine Learning and Big Data at uni-\nversity hackathons and Bell internal conferences\n\u2022Conducted interviews for junior and senior data engineering roles\nSep 2015 - Co-founder & Full Stack Developer LocalXChange Inc.\nMay 2016\u2022In a team of 2, raised $8,000 in funding from The Hub incubator at\nthe University of Guelph, to develop a hyperlocal content platform,\naimed at delivering local news and events to local users in realtime\n\u2022In a team of 3, built hybrid mobile & web apps with Ionic, Angular.js\nand MongoDB, surpassing 1,000 users within a month since launch\n\u2022Met with the Mayor of Guelph and University of", "doc_id": "0b0e75c0-a370-4fdc-9fce-818363573d60", "embedding": null, "doc_hash": "7dfe9372d9a882d952f911fdcbbc91589c8643f426142187047ef1c943ce1d7a", "extra_info": null, "node_info": {"start": 3277, "end": 4153}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "59f80929-c45e-4356-b7c9-df3f36658842", "3": "33dc4a9f-b32b-4a27-bf61-ef33d1250337"}, "__type__": "1"}, "33dc4a9f-b32b-4a27-bf61-ef33d1250337": {"text": "users within a month since launch\n\u2022Met with the Mayor of Guelph and University of Guelph o\ufb03cials to\ndiscuss how the app can help boost Guelph Tourism\nSep 2015 - Graduate Teaching Assistant University of Guelph\nDec 2016\u2022TA for CIS*2430 (OOP), CIS*4150 (Software Reliability & Testing)\nand CIS*3530 (Database Systems & Concepts) courses\n\u2022Delivered several lectures for CIS*3530 when professor was away\nat a conference\nDec 2013 - Test Automation Engineer Synechron\nApr 2015\u2022Primarily developed test automation libraries using Java and C#,\nscripts and CI / CD pipelines\n\u2022Lead development of a Keyword Driven & Behavior Driven test\nframework for Microsoft Dynamics CRM . Earned monetary award\n& client appreciation.\n\u2022Demonstrated that rewriting an in-house test framework for Mi-\ncrosoft Dynamics AX , using an open source library (White) instead\nof a proprietary one (Coded UI), would help the team save", "doc_id": "33dc4a9f-b32b-4a27-bf61-ef33d1250337", "embedding": null, "doc_hash": "d93d55195e6b2a756918d0743486a42e5a803d7adb37067de8f5e1a9d3ceca50", "extra_info": null, "node_info": {"start": 4119, "end": 5018}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "0b0e75c0-a370-4fdc-9fce-818363573d60", "3": "1ca2d8f1-05b3-48d5-b259-b4d68ee3fae1"}, "__type__": "1"}, "1ca2d8f1-05b3-48d5-b259-b4d68ee3fae1": {"text": "instead\nof a proprietary one (Coded UI), would help the team save $4K an-\nnually by downgrading Microsoft Visual Studio\nRes earch\n2015 - 2017 MSc. Candidate, Graduate Research Assistant University of Guelph\nThesis : Data Integration from Multiple Historical Sources to Study\nCanadian Casualties of WWI\n\u2022Proposed a stepwise deterministic method to integrate datasets\nwithout labeled data. The method performs comparably with a\nmethod that incorporates a Support Vector Machine\n\u2022Prepared a longitudinal dataset to enable comprehensive analyses\nabout WWI Canadian society and military, seeding further research\n\u2022Tools : R, Python, scikit-learn, pandas\nPub lications\nL. Antonie, H. Gadgil, G. Grewal, and K. Inwood, \u201cHistorical Data Integration - A\nStudy of WWI Canadian Soldiers,\u201d in 2016 IEEE 16th International Conference on\nData Mining Workshops (ICDMW), pp. 186-193, IEEE, 2016.HARSH", "doc_id": "1ca2d8f1-05b3-48d5-b259-b4d68ee3fae1", "embedding": null, "doc_hash": "40329915fad492e5ed3e539a41070e23346f270e525633180c8cc9924e4bad74", "extra_info": null, "node_info": {"start": 5032, "end": 5916}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "33dc4a9f-b32b-4a27-bf61-ef33d1250337", "3": "55a442f4-8340-4ee2-a4a3-d5e467baa885"}, "__type__": "1"}, "55a442f4-8340-4ee2-a4a3-d5e467baa885": {"text": "(ICDMW), pp. 186-193, IEEE, 2016.HARSH GADGIL\nData Engineer\n\uf10b (647) 221 7999\n\uf0ac hgadgil.com\n\uf003 harsh.gadgil@gmail.com\n\uf0e1 /in/hsgadgil\n\uf09b opensorceror\nTechnical Skills\nOverview\nData\nEngineeringFull Stack\nDev\nOOP\nMachine\nLearningDevOps\nProgramming\n0LOC\n 5000LOC\nC\u2022C++ \u2022RJavaScript \u2022SQL \u2022LATEXScala \u2022Java \u2022Python\nEducation\nMSc., Computer Science (GPA: 3.7)\nSpecialization: Data Mining\nUniversity of Guelph\n2015 - 2017 | Guelph, Canada\nBEng., Computer Engineering (GPA: 4.0)\nUniversity of Pune\n2009 - 2013 | Pune, India\nMARISSA MAYER\nBusiness Woman & Proud Geek\n@mmayer@yahoo-inc.com /envel\u2322peAddress, Street, 00000 County \u2642\u00b6ap-\u00b6arkerSunnyvale,", "doc_id": "55a442f4-8340-4ee2-a4a3-d5e467baa885", "embedding": null, "doc_hash": "71604299816e01d8b19eeb5d499fe602c1550eda6a1244ee8813ffa9ecc32fda", "extra_info": null, "node_info": {"start": 5938, "end": 6574}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "1ca2d8f1-05b3-48d5-b259-b4d68ee3fae1", "3": "cac37684-2340-4de3-9881-e450cd54577f"}, "__type__": "1"}, "cac37684-2340-4de3-9881-e450cd54577f": {"text": "Street, 00000 County \u2642\u00b6ap-\u00b6arkerSunnyvale, CA\n/gl\u2322bemarissamayr.tumblr.com /twitter@marissamayer /linkedinmarissamayer\nEXPERIENCE\nPresident & CEO\nYahoo!\n\u1f4c5July 2012 \u2013 Ongoing \u2642\u00b6ap-\u00b6arkerSunnyvale, CA\n\u2022Led the $5 billion acquisition of the company with Verizon \u2013 the entity\nwhich believed most in the immense value Yahoo! has created\n\u2022Acquired Tumblr for $1.1 billion and moved the company\u2019s blog there\n\u2022Built Yahoo\u2019s mobile, video and social businesses from nothing in 2011\nto $1.6 billion in GAAP revenue in 2015\n\u2022Tripled the company\u2019s mobile base to over 600 million monthly active\nusers and generated over $1 billion of mobile advertising revenue last\nyear\nVice President of Location & Services\nGoogle\n\u1f4c5Oct 2010 \u2013 July 2012 \u2642\u00b6ap-\u00b6arkerPalo Alto, CA\n\u2022Position Google Maps as the world leader in mobile apps and", "doc_id": "cac37684-2340-4de3-9881-e450cd54577f", "embedding": null, "doc_hash": "146add65889ba77d99a3a0852c4984993dd37e0d19c4e49971ca54a1f4360adb", "extra_info": null, "node_info": {"start": 6570, "end": 7383}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "55a442f4-8340-4ee2-a4a3-d5e467baa885", "3": "909b6967-6e74-4b2b-ac2e-76c6b0a8f4d1"}, "__type__": "1"}, "909b6967-6e74-4b2b-ac2e-76c6b0a8f4d1": {"text": "Alto, CA\n\u2022Position Google Maps as the world leader in mobile apps and navigation\n\u2022Oversaw 1000+ engineers and product managers working on Google\nMaps, Google Places and Google Earth\nVice President of Search Products & UX\nGoogle\n\u1f4c52005 \u2013 2010 \u2642\u00b6ap-\u00b6arkerPalo Alto, CA\nProduct Manager & UI Lead\nGoogle\n\u1f4c5Oct 2001 \u2013 July 2005 \u2642\u00b6ap-\u00b6arkerPalo Alto, CA\n\u2022Appointed by the founder Larry Page in 2001 to lead the Product Man-\nagement and User Interaction teams\n\u2022Optimized Google\u2019s homepage and A/B tested every minor detail to\nincrease usability (incl. spacing between words, color schemes and pixel-\nby-pixel element alignment)\nA DAY OF MY LIFE\nSleeping & dreaming about workPublic resolving issues\nwith Yahoo! investorsNew York & San Francisco\nBallet Jawbone board memberSpending time with familyBusiness development\nfor Yahoo! after the\nVerizon acquisition\nShowing Yahoo!\nemployees that their\nwork has", "doc_id": "909b6967-6e74-4b2b-ac2e-76c6b0a8f4d1", "embedding": null, "doc_hash": "43b44df064dea7d32d7164588ef761a769b5b7ca5215bb021417065239cb05a5", "extra_info": null, "node_info": {"start": 7365, "end": 8261}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "cac37684-2340-4de3-9881-e450cd54577f", "3": "8d9428c0-8000-4b9d-862f-e9285e4bd500"}, "__type__": "1"}, "8d9428c0-8000-4b9d-862f-e9285e4bd500": {"text": "the\nVerizon acquisition\nShowing Yahoo!\nemployees that their\nwork has meaning\nBaking cupcakesLIFE PHILOSOPHY\n\u201cIf you don\u2019t have any shadows, you\u2019re\nnot standing in the light.\u201d\nMOST PROUD OF\n\u1f3c6Courage I had\nto take a sinking ship and try to make it\n\ufb02oat\n/heartbeatPersistence & Loyalty\nI showed despite the hard moments\nand my willingness to stay with Yahoo\nafter the acquisition\n/char\u25ce-lineGoogle\u2019s Growth\nfrom a hundred thousand searches per\nday to over a billion\n\u2640Inspiring women in tech\nYoungest CEO on Fortune\u2019s list of 50\nmost powerful women\nSTRENGTHS\nHard-working (18/24) Persuasive\nMotivator & Leader\nUX Mobile Devices & Applications\nProduct Management & Marketing\nLANGUAGES\nEnglish \u25cb \u25cb \u25cb \u25cb \u25cb\nSpanish \u25cb \u25cb \u25cb \u25cb \u25cb\nGerman \u25cb \u25cb \u25cb", "doc_id": "8d9428c0-8000-4b9d-862f-e9285e4bd500", "embedding": null, "doc_hash": "263ed49ac66c3a6dc2da84fbbab3e608c5341d048a856f46a50f1de5f165071a", "extra_info": null, "node_info": {"start": 8257, "end": 8986}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "909b6967-6e74-4b2b-ac2e-76c6b0a8f4d1", "3": "5a878885-a350-490e-8f34-b240bc055eba"}, "__type__": "1"}, "5a878885-a350-490e-8f34-b240bc055eba": {"text": "\u25cb \u25cb \u25cb \u25cb \u25cb\nGerman \u25cb \u25cb \u25cb \u25cb\u25cb\u25cb\nEDUCATION\nM.S. in Computer Science\nStanford University\n\u1f4c5Sept 1997 \u2013 June 1999\nB.S. in Symbolic Systems\nStanford University\n\u1f4c5Sept 1993 \u2013 June 1997\nPUBLICATIONS\n\u1f56EBooks\n\u2022E. Someone and T. Lim ,A Fictional Research . Somewhere, Some\nPlace, 2010.\n/file-altJournal Articles\n\u2022L. T. Wong and E. Someone, \u201cA non-existant paper,\u201d Journal of\nCarrying On , vol. 12, 2011.\n\u2022L. T. Lim , E. Someone, and A. Other, \u201cA study into \ufb01reside story-\ntelling,\u201d Journal of Carrying On , vol. 7, 2008.\n/usersConference Proceedings\n\u2022E. Someone and L. T. Lim , \u201cAnother paper something something,\u201d\ninProceedings of the 72nd AmaZing Conference , Far Far", "doc_id": "5a878885-a350-490e-8f34-b240bc055eba", "embedding": null, "doc_hash": "b031c5d0ae6004b8faa6d426e07329cfd8cfd01530d47d4e3e81f1cf0b8685bb", "extra_info": null, "node_info": {"start": 9035, "end": 9690}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "8d9428c0-8000-4b9d-862f-e9285e4bd500", "3": "a3a3c26d-0250-43f3-af88-b81fbd7777ad"}, "__type__": "1"}, "a3a3c26d-0250-43f3-af88-b81fbd7777ad": {"text": "of the 72nd AmaZing Conference , Far Far Away,\n2013.REFEREES\nProf. Alpha Beta\n@Institute\n/envel\u2322pea.beta@university.edu\nAddress Line 1\nAddress line 2\nProf. Gamma Delta\n@Institute\n/envel\u2322peg.delta@university.edu\nAddress Line 1\nAddress line 2\n1764.1 Pr ocesses and Threads\nMultithreading\nThread Functionality\n4.2\n T\nypes of Threads\nUser-Level and Kernel-Level ThreadsOther Arrangements\n4.3\n Multicor\ne and Multithreading\nPerformance of Software on MulticoreApplication Example: Valve Game Software\n4.4\n W\nindows Process and Thread Management\nManagement of Background Tasks and Application LifecyclesThe Windows ProcessProcess and Thread ObjectsMultithreadingThread StatesSupport for OS Subsystems\n4.5\n Solaris \nThread and SMP Management\nMultithreaded ArchitectureMotivationProcess StructureThread ExecutionInterrupts as Threads\n4.6\n Linux Pr\nocess and Thread", "doc_id": "a3a3c26d-0250-43f3-af88-b81fbd7777ad", "embedding": null, "doc_hash": "7673466e74f94958703a81648131111405a020f852c73a4514bc07acf31e2cfe", "extra_info": null, "node_info": {"start": 9673, "end": 10529}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "5a878885-a350-490e-8f34-b240bc055eba", "3": "219c3cea-3bfd-4e2a-b3eb-08cfd8c3fd7b"}, "__type__": "1"}, "219c3cea-3bfd-4e2a-b3eb-08cfd8c3fd7b": {"text": "ExecutionInterrupts as Threads\n4.6\n Linux Pr\nocess and Thread Management\nLinux TasksLinux ThreadsLinux Namespaces\n4.7\n Andr\noid Process and Thread Management\nAndroid ApplicationsActivitiesProcesses and Threads\n4.8\n Mac OS X Grand Central Dispatch\n4.\n9\n Summary\n4.\n10\n K\ney Terms, Review Questions, and ProblemsThreads Chapter \nM04_STAL4290_09_GE_C04.indd   176 5/2/17   4:38 PM\n4.1 / PROCESSES AND THREADS   177\nThis chapter examines some more advanced concepts related to process manage-\nment, which are found in a number of contemporary operating systems. We show that the concept of process is more complex and subtle than presented so far and in fact embodies two separate and potentially independent concepts: one relat-ing to resource ownership, and another relating to execution. This distinction has led to the development, in many operating systems, of a construct known as the thread.\n 4. 1 PR", "doc_id": "219c3cea-3bfd-4e2a-b3eb-08cfd8c3fd7b", "embedding": null, "doc_hash": "36e7f07082137b8822e69f533daf14f8e21ad70823c6fe04cf1f34aef9dc857f", "extra_info": null, "node_info": {"start": 10508, "end": 11411}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "a3a3c26d-0250-43f3-af88-b81fbd7777ad", "3": "6be6f343-8ae8-463c-929c-32d118881e3d"}, "__type__": "1"}, "6be6f343-8ae8-463c-929c-32d118881e3d": {"text": "in many operating systems, of a construct known as the thread.\n 4. 1 PR OCESSES AND THREADS\nThe discussion so far has presented the concept of a process as embodying two characteristics:\n1.\n R\nesource ownership: A process includes a virtual address space to hold the \nprocess image;\u00a0recall from Chapter 3 that the process image is the collection of program, data, stack, and attributes defined in the process control block. From time to time, a process may be allocated control or ownership of resources, such as main memory, I/O channels, I/O devices, and files. The OS performs a protection function to prevent unwanted interference between processes with respect to resources.\n2.\n Scheduling/e\nxecution: The execution of a process follows an execution path \n(trace) through one or more programs \u00a0(e.g., Figure 1.5). This execution may \nbe interleaved with that of other processes. Thus, a process has an execution state (Running, Ready, etc.) and a dispatching priority, and is the entity that is", "doc_id": "6be6f343-8ae8-463c-929c-32d118881e3d", "embedding": null, "doc_hash": "673c0445ab0f7e2e157564260d03a4b342ff81d2b083c8bdce54b77e3aa573e8", "extra_info": null, "node_info": {"start": 11409, "end": 12408}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "219c3cea-3bfd-4e2a-b3eb-08cfd8c3fd7b", "3": "b3ea61ec-adb3-4c42-96d8-2b21b37569df"}, "__type__": "1"}, "b3ea61ec-adb3-4c42-96d8-2b21b37569df": {"text": "(Running, Ready, etc.) and a dispatching priority, and is the entity that is scheduled and dispatched by the OS.\nSome thought should convince the reader that these two characteristics are \nindependent and could be treated independently by the OS. This is done in a number \nof operating systems, particularly recently developed systems. To distinguish the two characteristics, the unit of dispatching is usually referred to as a thread or Learning  Objectives\nAfter studying this chapter, you should be able to:\n\u2022\tUnderstand the distinction between process and thread.\n\u2022\tDescribe the basic design issues for threads.\n\u2022\tExplain the difference between user-level threads and kernel-level threads.\n\u2022\tDescribe the thread management facility in Windows.\n\u2022\tDescribe the thread management facility in Solaris.\n\u2022\tDescribe the thread management facility in Linux.\nM04_STAL4290_09_GE_C04.indd   177 5/2/17   4:38 PM\n178  CHAPTER  4 / T HREADS\nlightweight\u00a0process, while", "doc_id": "b3ea61ec-adb3-4c42-96d8-2b21b37569df", "embedding": null, "doc_hash": "b730a0e291a114e5ffe1374e6bfd3aa974783b21bd0f6606a97e6375830f7599", "extra_info": null, "node_info": {"start": 12403, "end": 13361}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "6be6f343-8ae8-463c-929c-32d118881e3d", "3": "1b58872b-38ea-49ed-946e-14984e05e15a"}, "__type__": "1"}, "1b58872b-38ea-49ed-946e-14984e05e15a": {"text": "PM\n178  CHAPTER  4 / T HREADS\nlightweight\u00a0process, while the unit of resource ownership is usually referred to as a \nprocess or task.1\nMultithreading\nMultithreading refers to the ability of an OS to support multiple, concurrent paths of execution within a single process. The traditional approach of a single thread of execution per process, in which the concept of a thread is not recognized, is referred to as a single-threaded approach. The two arrangements shown in the left half of Figure 4.1 are single-threaded approaches. MS-DOS is an example of an OS that supports a single-user process and a single thread. Other operating systems, such as some variants of UNIX, support multiple user processes, but only support one thread per process. The right half of Figure 4.1 depicts multithreaded approaches. A\u00a0Java runtime environment is an example of a system of one process with multiple threads. Of interest in this section is the use of multiple processes, each of which supports multiple threads. This approach is taken in Windows, Solaris, and many", "doc_id": "1b58872b-38ea-49ed-946e-14984e05e15a", "embedding": null, "doc_hash": "12eb4340e0001002f26e9aa0600df09ee4a27b472e37f68fdf2fda505ef5d693", "extra_info": null, "node_info": {"start": 13378, "end": 14434}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "b3ea61ec-adb3-4c42-96d8-2b21b37569df", "3": "35b5f125-0ff6-4705-aea5-3ffa73e865bf"}, "__type__": "1"}, "35b5f125-0ff6-4705-aea5-3ffa73e865bf": {"text": "supports multiple threads. This approach is taken in Windows, Solaris, and many \n1Alas, even this degree of consistency is not maintained. In IBM\u2019s mainframe operating systems, the con-\ncepts of address space and task, respectively, correspond roughly to the concepts of process and thread that \nwe describe in this section. Also, in the literature, the term lightweight process is used as either (1)\u00a0equiva-lent to the term thread, (2) a particular type of thread known as a kernel-level thread, or (3) in the case of Solaris, an entity that maps user-level threads to kernel-level threads.Figure 4.1  Thr eads and ProcessesOne process\nOne threadOne process\nMultiple threads\nMultiple processes\nOne thread per process\n= Instruction traceMultiple processes\nMultiple threads per process\nM04_STAL4290_09_GE_C04.indd   178 5/2/17   4:38 PM\nShubhi Rani Email :", "doc_id": "35b5f125-0ff6-4705-aea5-3ffa73e865bf", "embedding": null, "doc_hash": "156fecc224f029f44f87b49fe760deb139ed62539404afb2fe80358d0a56dc91", "extra_info": null, "node_info": {"start": 14415, "end": 15270}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "1b58872b-38ea-49ed-946e-14984e05e15a", "3": "34083a14-1814-4a40-aff5-0c685ae3d616"}, "__type__": "1"}, "34083a14-1814-4a40-aff5-0c685ae3d616": {"text": "178 5/2/17   4:38 PM\nShubhi Rani Email : shubhi2808@gmail.com\nLinkedin: https://www.linkedin.com/in/shubhir/ Mobile : +1-631-645-8315\nGithub: https://github.com/shubhi28\nEducation\n\u000fStony Brook University Stony Brook, NY\nMasters in Computer Science; GPA: 3.54 Aug 2015 - Dec 2016\nCourses: Operating Systems, Analysis Of Algorithms, Arti\fcial Intelligence, Machine Learning, Probability and Statistics and Network Security.\n\u000fBirla Institute of Technology Mesra, India\nBachelor of Computer Science; GPA: 3.9 (8.54/10.0 - First in class of 60) Aug 2008 - May 2012\nSkills Summary\n\u000fLanguages : Java, C++, Python, C, SQL, Unix scripting\n\u000fTools : Kubernetes, Docker, Springboot, GIT, JIRA, Matlab, XCode, Postgres\nExperience\n\u000fVMware Palo Alto, CA\nMember", "doc_id": "34083a14-1814-4a40-aff5-0c685ae3d616", "embedding": null, "doc_hash": "f1c688c2737641e62f3b46b5f695531f4e3a26af4393c1338afec38df36b6983", "extra_info": null, "node_info": {"start": 15307, "end": 16052}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "35b5f125-0ff6-4705-aea5-3ffa73e865bf", "3": "2cbcdc83-1b04-4811-bb4d-4f29426ec0d0"}, "__type__": "1"}, "2cbcdc83-1b04-4811-bb4d-4f29426ec0d0": {"text": "XCode, Postgres\nExperience\n\u000fVMware Palo Alto, CA\nMember Of Technical Sta\u000b Feb 2017 - Current\n\u000eEvents and Alert Manager : Network Fabric Controller is a logically centralized software controller to manage a\ndistributed physical network fabric or a physical network underlay. Designed and developed a library which can be used by\nany services within Network Fabric Controller to generate events and raise alerts for NFC managed objects. The events and\nalerts are displayed on the NFC dashboard.\n\u000eUpgrade NFC : Designed and developed an over-the-air and air-gapped upgrade mechanism that is used to upgrade the\nsingle node Network Fabric Controller cluster.\n\u000eHealth Monitoring System : Designed and developed a monitoring service which is responsible for monitoring the health\nof all the micro services running inside NFC cluster.\n\u000eCLI framework : Developed an internal command line interface tool which provides a set of commands speci\fc to Network\nFabric Controller projects to get the system health, logs and current resource utilization. It can be easily extended to perform\nvarious other", "doc_id": "2cbcdc83-1b04-4811-bb4d-4f29426ec0d0", "embedding": null, "doc_hash": "5b6a88063f175cf0ca8e2d4466b16bf8b7ec30b104c86e0399a11e44a3d35e4a", "extra_info": null, "node_info": {"start": 16034, "end": 17123}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "34083a14-1814-4a40-aff5-0c685ae3d616", "3": "56c10147-3cd4-40cc-9ff8-d9ec4e7353e0"}, "__type__": "1"}, "56c10147-3cd4-40cc-9ff8-d9ec4e7353e0": {"text": "and current resource utilization. It can be easily extended to perform\nvarious other actions.\n\u000eBootstrap NFC : Network Fabric Controller is composed of several micro services deployed on the Kubernetes pods on a\nsingle-node cluster. Designed and implemented the bootstrapping mechanism to package all the services and deploy on the\nKubernetes environment.\n\u000eInstall/Upgrade/Uninstall NSX agent : Worked on install, upgrade and uninstall mechanism of NSX agent on workload\nVMs deployed on NSX cross cloud environment.\n\u000eAppDiscovery : Worked on application pro\fling feature which provides visualization and details of which processes inside a\nworkload VM are communicating on the network.\n\u000fStony Brook University Stony Brook, NY\nResearch Assistant - Prof. Erez Zadok May 2016 - August 2016\n\u000eSystem Call Trace Record/Replay : Worked on building a trace replayer at system call level to reproduce system call\noperations that were captured during a speci\fc workload using C, C++, DataSeries.", "doc_id": "56c10147-3cd4-40cc-9ff8-d9ec4e7353e0", "embedding": null, "doc_hash": "463b223270088fb7db379191387795a5199ce8e3ac164ce90d4797cadf581349", "extra_info": null, "node_info": {"start": 17102, "end": 18087}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "2cbcdc83-1b04-4811-bb4d-4f29426ec0d0", "3": "2fc8dc94-f721-4351-a1b1-688862db6d76"}, "__type__": "1"}, "2fc8dc94-f721-4351-a1b1-688862db6d76": {"text": "were captured during a speci\fc workload using C, C++, DataSeries. Developed a wrapper class that makes\nC++ functions callable by strace C code.\n\u000fSamsung Research Institute Noida, India\nSoftware Developer Engineer Jun 2012 - July 2015\n\u000eAndroid File System :\n\u000fInvolved in board bring-up activities for Android Smart phones based on Exynos and Broadcom chipsets on Android\nversion 4.3 Jelly Bean to Android 5.0 Lollipop.\n\u000fExperienced in porting of File System (FAT, EXFAT, SDCARDFS, EXT4) on Samsung mobiles proprietary platform.\n\u000fEnhanced performance of smart phones having low RAM by analyzing performance using blktrace and tuning kernel\nparameters. The code was merged in around 15 smart phones.\nAcademic Projects\n\u000fPlug board Proxy (Networking) : Developed a plug board proxy that adds an extra layer of encryption to connections towards\nTCP services. Clients running on same server connect to pbproxy, which then relays all tra\u000ec to actual services. (Mar", "doc_id": "2fc8dc94-f721-4351-a1b1-688862db6d76", "embedding": null, "doc_hash": "e6fcc8e788a4f8d11846690275c827e4a2347f65013e9bb0a8f1eada16094fa0", "extra_info": null, "node_info": {"start": 18105, "end": 19061}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "56c10147-3cd4-40cc-9ff8-d9ec4e7353e0", "3": "294e8906-b2c0-4b42-89e5-a9aed21fcca5"}, "__type__": "1"}, "294e8906-b2c0-4b42-89e5-a9aed21fcca5": {"text": "server connect to pbproxy, which then relays all tra\u000ec to actual services. (Mar '16)\n\u000fAsynchronous Work Queue Manager (Kernel Programming) : Developed a kernel module to serve as an asynchronous\nwork queue manager with con\fgurable worker threads. Implemented netlink sockets to propagate callbacks from kernel to user\nland and throttling to improve job extraction latency. (Nov '15)\n\u000fAnti-Malware Stackable File System (Kernel Programming) : Implemented a stackable, anti-malware Linux \fle system\nthat prevents the existing \fle system from being corrupted by malware by detecting virus pattern while attempting to open, read\nand write a \fle. (Oct '15)\n\u000fFile Encryption System Call (Kernel Programming) : Implemented a system call in Linux kernel, which supports multiple\nciphers to encrypt or decrypt an input \fle.( Sep '15)\n\u000fPeg- Solitaire, Connect Four, Sudoku (Game Development) : Designed a Peg Solitaire, Connect Four and Sudoku using\nIterative", "doc_id": "294e8906-b2c0-4b42-89e5-a9aed21fcca5", "embedding": null, "doc_hash": "defc654ed2c878b9c1965eb470cefff790306f96e110b824d6292701204d7678", "extra_info": null, "node_info": {"start": 19051, "end": 20000}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "2fc8dc94-f721-4351-a1b1-688862db6d76", "3": "9a09fc9e-b58d-4822-8566-1d2077645e0b"}, "__type__": "1"}, "9a09fc9e-b58d-4822-8566-1d2077645e0b": {"text": ": Designed a Peg Solitaire, Connect Four and Sudoku using\nIterative Deepening Search, Alpha-beta pruning and Backtracking, MRV and Forward Chaining Arti\fcial Intelligence Algorithms\nrespectively in Python. (Aug '15)\nHonors and Awards\n\u000fSelected in top 20 students for the Code House event organized by VMware in August15 - August17, 2016.\n\u000fRanked \frst among batch of 60 students in my Computer Science Engineering Branch.\n\u000fRanked \ffth among batch of 500 students at High School Level A.I.S.S.E 2005\n4.1 / PROCESSES AND THREADS   179\nmodern\u00a0versions of UNIX, among others. In this section, we give a general descrip-\ntion of multithreading; the details of the Windows, Solaris, and Linux approaches will be discussed later in this chapter.\nIn a multithreaded environment, a process is defined as the unit of resource \nallocation and a unit of protection. The following are associated with processes:\n\u2022\tA virtual address space that holds the process", "doc_id": "9a09fc9e-b58d-4822-8566-1d2077645e0b", "embedding": null, "doc_hash": "09d758d36059c703663f50fdc42c0404b4c711f7caabbe6d3daa02aaab29e110", "extra_info": null, "node_info": {"start": 20010, "end": 20956}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "294e8906-b2c0-4b42-89e5-a9aed21fcca5", "3": "aacd864d-17a5-4f85-8b8d-7648ed34a190"}, "__type__": "1"}, "aacd864d-17a5-4f85-8b8d-7648ed34a190": {"text": "following are associated with processes:\n\u2022\tA virtual address space that holds the process image\n\u2022\tProtected access to processors, other processes (for interprocess communica-tion), files, and I/O resources (devices and channels)\nWithin a process, there may be one or more threads, each with the following:\n\u2022\tA thread execution state (Running, Ready, etc.)\n\u2022\tA saved thread context when not running; one way to view a thread is as an independent program counter operating within a process\n\u2022\tAn execution stack\n\u2022\tSome per-thread static storage for local variables\n\u2022\tAccess to the memory and resources of its process, shared with all other threads in that process\nFigure 4.2 illustrates the distinction between threads and processes from the \npoint of view of process management. In a single-threaded process model (i.e., there \nis no distinct concept of thread), the representation of a process includes its process control block and user address space, as well as user and kernel stacks to manage the call/return behavior of the execution of the process. While the process is", "doc_id": "aacd864d-17a5-4f85-8b8d-7648ed34a190", "embedding": null, "doc_hash": "071ccc14a90eb488c665bcb49f9e26aa05de2b49abcad2361952edf2c63a574c", "extra_info": null, "node_info": {"start": 20937, "end": 22011}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "9a09fc9e-b58d-4822-8566-1d2077645e0b", "3": "2f8aaba1-7384-40ef-a191-546411b04627"}, "__type__": "1"}, "2f8aaba1-7384-40ef-a191-546411b04627": {"text": "to manage the call/return behavior of the execution of the process. While the process is running, it controls the processor registers. The contents of these registers are saved when the process is not running. In a multithreaded environment, there is still a single process \nFigure 4.2  Single-Thr eaded and Multithreaded Process ModelsSingle-threaded\nprocess model\nProcess\ncontrol\nblock\nUser\naddress\nspaceUser\nstack\nKernel\nstackMultithreaded\nprocess model\nProcess\ncontrol\nblock\nUser\naddress\nspaceUser\nstack\nKernel\nstackUser\nstack\nKernel\nstackUser\nstack\nKernel\nstackThread\ncontrol\nblockThread Thread Thread\nThread\ncontrol\nblockThread\ncontrol\nblock\nM04_STAL4290_09_GE_C04.indd   179 5/2/17   4:38 PM\n180  CHAPTER  4 / T HREADS\ncontrol block and user address space associated with the process, but now there are \nseparate stacks for each thread, as well as a separate control block for each thread containing register values, priority, and", "doc_id": "2f8aaba1-7384-40ef-a191-546411b04627", "embedding": null, "doc_hash": "b87ac6556090db340a87e61790d9593f8c80a66a82c2fcafd1758853f54d9bf9", "extra_info": null, "node_info": {"start": 22016, "end": 22953}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "aacd864d-17a5-4f85-8b8d-7648ed34a190", "3": "63422ac4-b245-4389-91bd-260cdd2b2f35"}, "__type__": "1"}, "63422ac4-b245-4389-91bd-260cdd2b2f35": {"text": "thread, as well as a separate control block for each thread containing register values, priority, and other thread-related state information.\nThus, all of the threads of a process share the state and resources of that process. \nThey reside in the same address space and have access to the same data. When one thread alters an item of data in memory, other threads see the results if and when they access that item. If one thread opens a file with read privileges, other threads in the same process can also read from that file.\nThe key benefits of threads derive from the performance implications:\n1.\n It\n takes far less time to create a new thread in an existing process, than to create \na brand-new process. Studies done by the Mach developers show that thread creation is ten times faster than process creation in UNIX [TEVA87].\n2.\n It tak\nes less time to terminate a thread than a process.\n3.\n It tak\nes less time to switch between two threads within the same process than \nto switch between processes.\n4.\n T\nhreads enhance efficiency in communication between different executing", "doc_id": "63422ac4-b245-4389-91bd-260cdd2b2f35", "embedding": null, "doc_hash": "c414775a026eaae566c3b3d0f16a13c2a7106edf15afa45f14ac4344ec883136", "extra_info": null, "node_info": {"start": 22942, "end": 24025}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "2f8aaba1-7384-40ef-a191-546411b04627", "3": "1b1741d3-7748-4d99-a7c0-4889dbbb9edc"}, "__type__": "1"}, "1b1741d3-7748-4d99-a7c0-4889dbbb9edc": {"text": "processes.\n4.\n T\nhreads enhance efficiency in communication between different executing \nprograms. In most operating systems, communication between independent processes requires the intervention of the kernel to provide protection and the mechanisms needed for communication. However, because threads within the same process share memory and files, they can communicate with each other without invoking the kernel.\nThus, if there is an application or function that should be implemented as a set \nof related units of execution, it is far more efficient to do so as a collection of threads, \nrather than a collection of separate processes.\nAn example of an application that could make use of threads is a file server. As \neach new file request comes in, a new thread can be spawned for the file management program. Because a server will handle many requests, many threads will be created and destroyed in a short period. If the server runs on a multiprocessor computer, then multiple threads within the same process can be executing simultaneously on different processors. Further, because processes or threads in a file server must share file data and therefore coordinate their actions,", "doc_id": "1b1741d3-7748-4d99-a7c0-4889dbbb9edc", "embedding": null, "doc_hash": "babdcaee51de45aee953a82539c77fbd52eeff4e581922399a33dadd3a8586c3", "extra_info": null, "node_info": {"start": 24033, "end": 25221}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "63422ac4-b245-4389-91bd-260cdd2b2f35", "3": "9b016c1d-c31b-453b-8680-705feb908e15"}, "__type__": "1"}, "9b016c1d-c31b-453b-8680-705feb908e15": {"text": "or threads in a file server must share file data and therefore coordinate their actions, it is faster to use threads and shared memory than processes and message passing for this coordination.\nThe thread construct is also useful on a single processor to simplify the structure \nof a program that is logically doing several different functions.\n[LETW88] gives four examples of the uses of threads in a single-user multipro-\ncessing system:\n1.\n F\noreground and background work: For example, in a spreadsheet program, one \nthread could display menus and read user input, while another thread executes user commands and updates the spreadsheet. This arrangement often increases the perceived speed of the application by allowing the program to prompt for the next command before the previous command is complete.\n2.\n Asynchr\nonous processing: Asynchronous elements in the program can be \nimplemented as threads. For example, as a protection against power failure, one can design a word processor to write its random access memory (RAM)", "doc_id": "9b016c1d-c31b-453b-8680-705feb908e15", "embedding": null, "doc_hash": "9d62107a1e3f55f7f3b7daedee93c0f8cc027dfa792d7e02b19c016d8b136acc", "extra_info": null, "node_info": {"start": 25227, "end": 26258}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "1b1741d3-7748-4d99-a7c0-4889dbbb9edc", "3": "abbf6083-74f3-45d9-a693-93169636a5fe"}, "__type__": "1"}, "abbf6083-74f3-45d9-a693-93169636a5fe": {"text": "against power failure, one can design a word processor to write its random access memory (RAM) \nM04_STAL4290_09_GE_C04.indd   180 5/2/17   4:38 PM\n4.1 / PROCESSES AND THREADS   181\nbuffer to disk once every minute. A thread can be created whose sole job is \nperiodic backup and that schedules itself directly with the OS; there is no need for fancy code in the main program to provide for time checks or to coordinate input and output.\n3.\n Speed of e\nxecution: A multithreaded process can compute one batch of data \nwhile reading the next batch from a device. On a multiprocessor system, mul-tiple threads from the same process may be able to execute simultaneously. Thus, even though one thread may be blocked for an I/O operation to read in a batch of data, another thread may be executing.\n4.\n Modular pr\nogram structure: Programs that involve a variety of activities or a \nvariety of sources and", "doc_id": "abbf6083-74f3-45d9-a693-93169636a5fe", "embedding": null, "doc_hash": "8a91c8f2a0a6956b2c933de4cfca94af03c01bdf13c8ce73a7a977083a1b0e06", "extra_info": null, "node_info": {"start": 26254, "end": 27153}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "9b016c1d-c31b-453b-8680-705feb908e15", "3": "0022cbf7-1f20-421b-9b33-64151a5d1d23"}, "__type__": "1"}, "0022cbf7-1f20-421b-9b33-64151a5d1d23": {"text": "Programs that involve a variety of activities or a \nvariety of sources and destinations of input and output may be easier to design and implement using threads.\nIn an OS that supports threads, scheduling and dispatching is done on a thread \nbasis; hence, most of the state information dealing with execution is maintained \nin thread-level data structures. There are, however, several actions that affect all of the threads in a process, and that the OS must manage at the process level. For example, suspension involves swapping the address space of one process out of main memory to make room for the address space of another process. Because all threads in a process share the same address space, all threads are suspended at the same time. Similarly, termination of a process terminates all threads within that process.\nThread Functionality\nLike processes, threads have execution states and may synchronize with one another. We look at these two aspects of thread functionality in turn.\nThread  STaTeS  As with processes, the key states for a thread are Running, Ready,", "doc_id": "0022cbf7-1f20-421b-9b33-64151a5d1d23", "embedding": null, "doc_hash": "8aef0350ced148085e191b8924ad732349c85beff8ec0a947b67815bbbf081dd", "extra_info": null, "node_info": {"start": 27171, "end": 28243}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "abbf6083-74f3-45d9-a693-93169636a5fe", "3": "ced053d1-bd4a-41ba-a8db-21430bfd9252"}, "__type__": "1"}, "ced053d1-bd4a-41ba-a8db-21430bfd9252": {"text": " As with processes, the key states for a thread are Running, Ready, \nand Blocked. Generally, it does not make sense to associate suspend states with threads because such states are process-level concepts. In particular, if a process is swapped out, all of its threads are necessarily swapped out because they all share the address space of the process.\nThere are four basic thread operations associated with a change in thread state \n[ANDE04]:\n1.\n Spa\nwn: Typically, when a new process is spawned, a thread for that process \nis also spawned. Subsequently, a thread within a process may spawn another thread within the same process, providing an instruction pointer and arguments for the new thread. The new thread is provided with its own register context and stack space and placed on the Ready queue.\n2.\n Block:\n When a thread needs to wait for an event, it will block (saving its user \nregisters, program counter, and stack pointers). The processor may then turn to the execution of another ready thread in the same or a different process.\n3.\n Unblock:\n When the event for which a thread is", "doc_id": "ced053d1-bd4a-41ba-a8db-21430bfd9252", "embedding": null, "doc_hash": "dd7e37f1dc737e734495c04fa87977c47425c423aa6b2f65d90e96b3846ad436", "extra_info": null, "node_info": {"start": 28251, "end": 29344}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "0022cbf7-1f20-421b-9b33-64151a5d1d23", "3": "d445f326-e45f-4238-bd9e-34f8de44edc6"}, "__type__": "1"}, "d445f326-e45f-4238-bd9e-34f8de44edc6": {"text": "a different process.\n3.\n Unblock:\n When the event for which a thread is blocked occurs, the thread is \nmoved to the Ready queue.\n4.\n Finish:\n When a thread completes, its register context and stacks are deallocated.\nM04_STAL4290_09_GE_C04.indd   181 5/2/17   4:38 PM\n182  CHAPTER  4 / T HREADS\nA significant issue is whether the blocking of a thread results in the blocking \nof the entire process. In other words, if one thread in a process is blocked, does this \nprevent the running of any other thread in the same process, even if that other thread is in a ready state? Clearly, some of the flexibility and power of threads is lost if the one blocked thread blocks an entire process.\nWe will return to this issue subsequently in our discussion of user-level versus \nkernel-level threads, but for now, let us consider the performance benefits of threads that do not block an entire process. Figure 4.3 (based on one in", "doc_id": "d445f326-e45f-4238-bd9e-34f8de44edc6", "embedding": null, "doc_hash": "f8bd80870d9b5730fbf366e4df70b016d17fc93fb05a7b2aecedf8153d33ebf0", "extra_info": null, "node_info": {"start": 29340, "end": 30259}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "ced053d1-bd4a-41ba-a8db-21430bfd9252", "3": "c5999b43-0c4a-4343-99d8-077896fcb626"}, "__type__": "1"}, "c5999b43-0c4a-4343-99d8-077896fcb626": {"text": "threads that do not block an entire process. Figure 4.3 (based on one in [KLEI96]) shows a program that performs two remote procedure calls (RPCs)\n2 to two different hosts to \nobtain a combined result. In a single-threaded program, the results are obtained in sequence, so the program has to wait for a response from each server in turn. Rewrit-ing the program to use a separate thread for each RPC results in a substantial speedup. Note if this program operates on a uniprocessor, the requests must be gener -\nated sequentially and the results processed in sequence; however, the program waits concurrently for the two replies.\n2An RPC is a technique by which two programs, which may execute on different machines, interact using \nprocedure call/return syntax and semantics. Both the called and calling programs behave as if the partner \nprogram were running on the same machine. RPCs are often used for client/server applications\u00a0and will be discussed in Chapter 16 .Figure 4.3  R", "doc_id": "c5999b43-0c4a-4343-99d8-077896fcb626", "embedding": null, "doc_hash": "1f1298c0a4e21fec9b4e0fe8a350cac3adc1c4007f33402ffdf755a5dd816b39", "extra_info": null, "node_info": {"start": 30261, "end": 31243}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "d445f326-e45f-4238-bd9e-34f8de44edc6", "3": "5afc94f7-cc1b-48a6-ae9f-5b4c7425f34b"}, "__type__": "1"}, "5afc94f7-cc1b-48a6-ae9f-5b4c7425f34b": {"text": "applications\u00a0and will be discussed in Chapter 16 .Figure 4.3  R emote Procedure Call (RPC) Using Threads(a) RPC using single thread\n(b) RPC using one thread per server (on a uniprocessor)Time\nProcess 1\nBlocked, waiting for response to RPC\nBlocked, waiting for processor, which is in use by Thread B\nRunningThread A (Process 1)\nThread B (Process 1)Server Server\nServer\nServerRPC\nrequest\nRPC\nrequest\nRPC\nrequestRPC\nrequest\nM04_STAL4290_09_GE_C04.indd   182 5/2/17   4:38 PM\n4.2 / TYPES OF THREADS   183\nOn a uniprocessor, multiprogramming enables the interleaving of multiple \nthreads within multiple processes. In the example of Figure 4.4, three threads in two \nprocesses are interleaved on the processor. Execution passes from one thread to another either when the currently running thread is blocked or when its time slice is", "doc_id": "5afc94f7-cc1b-48a6-ae9f-5b4c7425f34b", "embedding": null, "doc_hash": "25e783afcbe0e1831e5d630c6669ec3adb89d8d08c20886463c59373dec3726b", "extra_info": null, "node_info": {"start": 31250, "end": 32077}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "c5999b43-0c4a-4343-99d8-077896fcb626", "3": "481d25e1-5bba-4273-bae9-cf1aa643739e"}, "__type__": "1"}, "481d25e1-5bba-4273-bae9-cf1aa643739e": {"text": "from one thread to another either when the currently running thread is blocked or when its time slice is exhausted.\n3\nThread  SynchronizaTion  All of the threads of a process share the same address \nspace and other resources, such as open files. Any alteration of a resource by one thread affects the environment of the other threads in the same process. It is therefore necessary to synchronize the activities of the various threads so that they do not interfere with each other or corrupt data structures. For example, if two threads each try to add an element to a doubly linked list at the same time, one element may be lost or the list may end up malformed.\nThe issues raised and the techniques used in the synchronization of threads \nare, in general, the same as for the synchronization of processes.\u00a0These issues and techniques will be the subject of Chapters 5 and 6.\n 4. 2 TYPES OF THREADS\nUser-Level and Kernel-Level Threads\nThere are two broad categories of thread implementation: user-level threads (ULTs) and kernel-level", "doc_id": "481d25e1-5bba-4273-bae9-cf1aa643739e", "embedding": null, "doc_hash": "2f8df91e1fe1fd058262471cfda53b0ffc7fdf9e88ab12c55581394a67105b67", "extra_info": null, "node_info": {"start": 32045, "end": 33079}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "5afc94f7-cc1b-48a6-ae9f-5b4c7425f34b", "3": "d428bb84-fb71-45cb-8bee-ad22617292ec"}, "__type__": "1"}, "d428bb84-fb71-45cb-8bee-ad22617292ec": {"text": "categories of thread implementation: user-level threads (ULTs) and kernel-level threads (KLTs).\n4 The latter are also referred to in the literature as \nkernel-supported threads or lightweight processes.\nUSer-Leve L Thread S In a pure ULT facility, all of the work of thread management \nis done by the application and the kernel is not aware of the existence of threads. \n3In this example, thread C begins to run after thread A exhausts its time quantum, even though thread B \nis also ready to run. The choice between B and C is a scheduling decision, a topic covered in Part Four.\n4The acronyms ULT and KLT are not widely used, but are introduced for conciseness.Figure 4.4  Multithr eading Example on a UniprocessorTime\nBlockedI/O\nrequest\nThread A (Process 1)\nThread B (Process 1)\nThread C (Process 2)\nReady RunningRequest\ncompleteTime quantum\nexpires\nTime", "doc_id": "d428bb84-fb71-45cb-8bee-ad22617292ec", "embedding": null, "doc_hash": "8feb56bb88622bedb7938e25562b1d8455a56e7947558cd3571a8cea5173873c", "extra_info": null, "node_info": {"start": 33095, "end": 33952}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "481d25e1-5bba-4273-bae9-cf1aa643739e", "3": "5a2b739f-49da-4758-b04a-1d87aaead6c3"}, "__type__": "1"}, "5a2b739f-49da-4758-b04a-1d87aaead6c3": {"text": "C (Process 2)\nReady RunningRequest\ncompleteTime quantum\nexpires\nTime quantum\nexpires\nProcess\ncreated\nM04_STAL4290_09_GE_C04.indd   183 5/2/17   4:38 PM\n184  CHAPTER  4 / T HREADS\nFigure 4.5a illustrates the pure ULT approach. Any application can be programmed \nto be multithreaded by using a threads library, which is a package of routines for ULT management. The threads library contains code for creating and destroying threads, for passing messages and data between threads, for scheduling thread execution, and for saving and restoring thread contexts.\nBy default, an application begins with a single thread and begins running in \nthat thread. This application and its thread are allocated to a single process man-aged by the kernel. At any time that the application is running (the process is in the Running state), the application may spawn a new thread to run within the same process. Spawning is done by invoking the spawn utility in the threads library. Con-trol is", "doc_id": "5a2b739f-49da-4758-b04a-1d87aaead6c3", "embedding": null, "doc_hash": "92ace6397406d88369410d3a426b3d7adff8fa3efc138182e9c99f3cb412de98", "extra_info": null, "node_info": {"start": 33960, "end": 34934}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "d428bb84-fb71-45cb-8bee-ad22617292ec", "3": "0ce64ad4-bfa1-4a43-9ddd-4640e08a02a7"}, "__type__": "1"}, "0ce64ad4-bfa1-4a43-9ddd-4640e08a02a7": {"text": "is done by invoking the spawn utility in the threads library. Con-trol is passed to that utility by a procedure call. The threads library creates a data structure for the new thread and then passes control to one of the threads within this process that is in the Ready state, using some scheduling algorithm. When control is passed to the library, the context of the current thread is saved, and when control is passed from the library to a thread, the context of that thread is restored. The context essentially consists of the contents of user registers, the program counter, and stack pointers.\nAll of the activity described in the preceding paragraph takes place in user \nspace and within a single process. The kernel is unaware of this activity. The ker -\nnel continues to schedule the process as a unit and assigns a single execution state (Ready, Running, Blocked, etc.) to that process. The following examples should clarify the relationship between thread scheduling and process scheduling. Suppose process B is executing in its thread 2; the states of the process and two ULTs", "doc_id": "0ce64ad4-bfa1-4a43-9ddd-4640e08a02a7", "embedding": null, "doc_hash": "1da5c7985d35ce485bab339c545aad6696a8085d927975eb2c8347f606ec5e85", "extra_info": null, "node_info": {"start": 34938, "end": 36024}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "5a2b739f-49da-4758-b04a-1d87aaead6c3", "3": "0b0e162c-6a93-4257-9366-acd2432ca738"}, "__type__": "1"}, "0b0e162c-6a93-4257-9366-acd2432ca738": {"text": "process B is executing in its thread 2; the states of the process and two ULTs that are part of the process are shown in Figure 4.6a. Each of the following is a possible occurrence:\n1.\n T\nhe application executing in thread 2 makes a system call that blocks B. For \nexample, an I/O call is made. This causes control to transfer to the kernel. The kernel invokes the I/O action, places process B in the Blocked state, and Figure 4.5  User -Level and Kernel-Level ThreadsP PUser\nspaceThreads\nlibrary\nKernel\nspace\nP\nPUser\nspace\nKernel\nspace\nPUser\nspaceThreadslibrary\nKernel\nspace\n(c) Combined (b) Pure kernel\u2013level (a) Pure user\u2013level\nUser-level thread Kernel-level thread Process\nM04_STAL4290_09_GE_C04.indd   184 5/2/17   4:38 PM\nDoe John\nYOUR ADDRESS\n\u0126000000000000 |\u0107thisis@fakeemail.com", "doc_id": "0b0e162c-6a93-4257-9366-acd2432ca738", "embedding": null, "doc_hash": "9e4b28b3b3e7d8fbc85ca5fcf7fe6ae368bd9bbbfb4207acfca1ffad0476a1b6", "extra_info": null, "node_info": {"start": 36023, "end": 36809}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "0ce64ad4-bfa1-4a43-9ddd-4640e08a02a7", "3": "c50b84ce-553c-4edc-a78d-9e0e02005061"}, "__type__": "1"}, "c50b84ce-553c-4edc-a78d-9e0e02005061": {"text": "ADDRESS\n\u0126000000000000 |\u0107thisis@fakeemail.com |^github.com/themagicalmammal |]linkedin.com/in/themagicalmammal\nPersonalProfile\nAUniversityofLeedsgraduatestudentwhoisenrolledintheDataScienceandAnalysisprogramme. Dedicatedtosoftwareengineering,having\ntwoormoreyearsofexpertise,andspecialisinginfull\u2011stackwebdevelopment,algorithms,andmachinelearning. SearchingmostlyforMachine\nLearning,DataEngineer,andPythonDevelopmentpositions.\nEducation\nUniversityofLeeds Leeds,UK\nMScinDataScienceandAnalysis Sept2021\u2011Current\n\u2022HeadofSchoolInternationalExcellenceScholar\n\u2022WorkingasaPALMentor\n\u2022Courses: DataScience, ProgrammingforDataScience, KnowledgeRepresentationandReasoning, StatisticalTheoryandMethods, Learning\nSkillsthroughCaseStudies,ArtificialIntelligence,MachineLearning,StatisticalLearning\nMadhavInstituteofTechnologyandScience Gwalior,India\nBTechinInformationTechnology", "doc_id": "c50b84ce-553c-4edc-a78d-9e0e02005061", "embedding": null, "doc_hash": "04127c107b4ff3d1abdca5c380d46d3d42e2b23d9381c60ad81731dd33b9c04a", "extra_info": null, "node_info": {"start": 36830, "end": 37692}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "0b0e162c-6a93-4257-9366-acd2432ca738", "3": "49d97ceb-2281-4a7c-8dbb-3afb0baa3929"}, "__type__": "1"}, "49d97ceb-2281-4a7c-8dbb-3afb0baa3929": {"text": "Gwalior,India\nBTechinInformationTechnology May2016\u2011May2020\n\u2022GraduatedwithDistinction\n\u2022SelectedforIndustrialVisitamongthetopoftheclass\nAtomicEnergyCentralSchool Indore,India\nHighSchool Apr2014\u2011Apr2016\n\u2022PassedwithDistinction\n\u2022SpecialisedinPhysics,Chemistry,andMathswithComputerScience\nWorkExperience\nIndianInstituteofTechnology Indore,India\nSoftwareEngineer Sept2020\u2011Aug2021\n\u2022Collaboratedwithafour\u2011personteamtodevelopaCNNmodelthatutilisedYOLOasafoundationtoimprovetheaccuracyofambientlighting\nconditionsintheMobilenetarchitecture.\n\u2022Automatedandoptimisedthedatahandlingprocessfortrafficsigns,workingwithUbuntu20.04didshellscripting,andemployedotherLinux\ntools.\n\u2022Significantlyboostedthemodel\u2019saccuracyby60%,whichwasyieldinganaccuracyof70\u201178%underIndianstreetlight. Theoldermodels,had\nanaccuracyof10\u201115%.\n\u2022TechnicalSkills:", "doc_id": "49d97ceb-2281-4a7c-8dbb-3afb0baa3929", "embedding": null, "doc_hash": "2780fc3f9ccbdd671347ac80ab8ec1031f82281cfa7d625e93c84f5b8fa0bc90", "extra_info": null, "node_info": {"start": 37694, "end": 38511}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "c50b84ce-553c-4edc-a78d-9e0e02005061", "3": "174217e8-8274-49ed-956f-bb31873a9ccf"}, "__type__": "1"}, "174217e8-8274-49ed-956f-bb31873a9ccf": {"text": "Theoldermodels,had\nanaccuracyof10\u201115%.\n\u2022TechnicalSkills: PythonwithPyTorch,NumPy,Matplotlib,Pandas,Scikit\u2011learn,C++,UbuntuLinux,Linuxtools,Apt,Scripting,Git.\n\u2022SoftSkills: Teamwork,TimeManagement,Communication,Presentationskills.\nUniversityProjects\nTheRelationbetweenGDPandIMR Leeds,UK\nUniversityofLeeds Feb2022\u2011Apr2022\n\u2022Analysingdatafrom1960to2020anddiscoverpatternsinthedatathatshowtrendsbetweenGrossdomesticproductpercapita,InfantMortality\nrate,LiteracyRate,andIndustrialDevelopment.\n\u2022Studycross\u2011sectional,longitudinal,andamongvariouscountriestofindvariationsintrendsandgetthehistoricaldatatobackupthechange\ninthetrendofourdata.\n\u2022SpecificcasestudiesweretracedbacktotrendsseenintheUKandhowtheyaffectedtheGDPandIMR.\n\u2022TechnicalSkills:", "doc_id": "174217e8-8274-49ed-956f-bb31873a9ccf", "embedding": null, "doc_hash": "77c6ade49df084fd0a969ba0e1a86167eaf2a4aa57775a591ae2ec6d7211d676", "extra_info": null, "node_info": {"start": 38498, "end": 39231}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "49d97ceb-2281-4a7c-8dbb-3afb0baa3929", "3": "628afe8a-1d55-4545-9b4c-6adf4bc90774"}, "__type__": "1"}, "628afe8a-1d55-4545-9b4c-6adf4bc90774": {"text": "Tableau,Overleaf,LaTeX.\n\u2022SoftSkills: TimeManagement,Teamwork,Presentationskills,Reportwriting.\nIPLAnalysis Leeds,UK\nUniversityofLeeds Nov2021\u2011Dec2021\n\u2022Analysingdatafrom2008to2015todiscoverpatternssuchastrends,correlations,andprobabilities.\n\u2022Findingthedifferencesbetweenthebestteamsandplayersinvariousfields,aswellastheirperformanceonthefieldandtheopponents.\n\u2022TechnicalSkills: PythonwithPandas,matplotlib,Seaborn.\n\u2022SoftSkills: Presentationskills,Leadership,Teamwork,LogicalThinking.\nFEBRUARY23,2023 1\nStudyofthebehaviorofSerialKillers Leeds,UK\nUniversityofLeeds Oct2021\u2011Dec2021\n\u2022Study of serial killers behavior with various motives such as convenience (did not want children or spouse), enjoyment, power, escape, or\navoidingarrest.\n\u2022Finding patterns in their starting and ending ages (when they are caught) and other factors of killing, as", "doc_id": "628afe8a-1d55-4545-9b4c-6adf4bc90774", "embedding": null, "doc_hash": "b8594186d824aafe76d4e026bf668c9d0dfe30eb7ea9f56fdbed312220a699d7", "extra_info": null, "node_info": {"start": 39288, "end": 40127}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "174217e8-8274-49ed-956f-bb31873a9ccf", "3": "0c7585ae-30fd-4183-b81f-e6cb538fc8b2"}, "__type__": "1"}, "0c7585ae-30fd-4183-b81f-e6cb538fc8b2": {"text": "their starting and ending ages (when they are caught) and other factors of killing, as well as how it varies with different\nmotives.\n\u2022TechnicalSkills: Rwithggplot2,tidyr,RMarkdown.\n\u2022SoftSkills: Reportwriting,LogicalThinking,CriticalThinking.\nSkills\nProgramming Python(Pandas,PyTorch,NumPy,Scikit\u2011learn. etc.),R(ggplot2),PHP,C/C++,HTML/CSS,JavaScript,SQL.\nMiscellaneous Linux,Shell(Bash/Zsh),LATEX(Overleaf/RMarkdown),Tableau,MicrosoftOffice,Firebase,Git.\nSoftSkills TimeManagement,Teamwork,Problem\u2011solving,Documentation,EngagingPresentation.\nAchievements\n2019319/340,GraduateRecordExaminations(GRE) India\n2018Elite,DBMSNPTELExam India\n2018Elite,CNPTELExam India\n2019Winner,SmartIndiaHackathon(SIH) India\n2014Level3,TablaNiketanExam", "doc_id": "0c7585ae-30fd-4183-b81f-e6cb538fc8b2", "embedding": null, "doc_hash": "35c7b4bf943a538c67ee91f0c5bebe68fce132d5ae7ec5750a82b16a5a80faa5", "extra_info": null, "node_info": {"start": 40056, "end": 40787}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "628afe8a-1d55-4545-9b4c-6adf4bc90774", "3": "bf92cfae-8b4e-40a1-ae9d-bc176b072f40"}, "__type__": "1"}, "bf92cfae-8b4e-40a1-ae9d-bc176b072f40": {"text": "India\n2014Level3,TablaNiketanExam India\n2014Level1,NationalTalentSearchExam(NTSE) India\nPublications\nJOURNALARTiCLES\nIncentive\u2011basedresourceassignmentandregulationforcollaborativecloudservicesincommunitynetworks\nAminMKhan, \u00dcmitC.B\u00fcy\u00fcksahin, FelixFreitag\nJournalofComputerandSystemSciences 81.8(Dec.2015)pp.1479\u20131495.2015\nCloudservicesintheGuifi.netcommunitynetwork\nMennanSelimi, AminMKhan, EmmanouilDimogerontakis, FelixFreitag, RogerPueyoCentelles\nComputerNetworks 93.P2(Dec.2015)pp.373\u2013388.2015\nCONFERENCEPROCEEDiNGS\nPrototypingIncentive\u2011BasedResourceAssignmentforCloudsinCommunityNetworks\nAminMKhan, UmitCavusBuyuksahin, FelixFreitag\n28thIEEEInternationalConferenceonAdvancedInformationNetworkingandApplications(AINA2014)", "doc_id": "bf92cfae-8b4e-40a1-ae9d-bc176b072f40", "embedding": null, "doc_hash": "33f7484271e4023babf08c8a1125f53f91b2aa7711334f9a28145e6cde235c07", "extra_info": null, "node_info": {"start": 40827, "end": 41551}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "0c7585ae-30fd-4183-b81f-e6cb538fc8b2", "3": "e65e5847-40f3-4631-8f6b-0342fc83c372"}, "__type__": "1"}, "e65e5847-40f3-4631-8f6b-0342fc83c372": {"text": ",2014,Victoria,Canada\nInterests\nCooking Ilovecooking. IamanexpertinmostIndian\u2011stylecooking,enjoybakingandmakingmyownpizza.\nLinux Since2017,IhavebeeninlovewithLinux. IrecentlyswitchedtoMacOS,whichfeelslikeapremiumofLinux.\nTechnicalWriting IwritedescriptiveblogsaboutLinuxsomeofthemareonmy GitHubandMedium.\nArtIhavealwaysenjoyeddrawingsinceIwasachild. Recently,Ihaveshiftedtodigitalartmostlyon Deviantart .\nVideoGames Ialwayshadthegaminggene. Imostlyplayonmyphoneandoccasionallyonmyswitch.\nSwimming IstartedswimmingwhenIwas12. Goingthroughsubmergedthingswhileholdingmybreathwasthemostexcitingpart.\nLanguages\nEnglish Professionalproficiency\nHindi Nativeproficiency\nReferencesavailableuponrequest.\nFEBRUARY23,2023 2", "doc_id": "e65e5847-40f3-4631-8f6b-0342fc83c372", "embedding": null, "doc_hash": "95f9510d37d7c2e12f4de0db2e996234d27513568e6b6542586a04d176a6890d", "extra_info": null, "node_info": {"start": 41585, "end": 42296}, "relationships": {"1": "ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e", "2": "bf92cfae-8b4e-40a1-ae9d-bc176b072f40"}, "__type__": "1"}}, "ref_doc_info": {"ca8a600c-b03e-4322-8aa4-ddf4a5ff1b9e": {"doc_hash": "45dbc73f4735ec3655428c1332e00c4d0f8c269bb128526e78035320998fe062"}, "4fd6bd4a-fcc9-4dd9-9129-a92484e6ffed": {"doc_hash": "fd785ac441d89ca6b53ef320f8d1864e52daa52d8d8e1a4f22fe7a420367f40e"}, "3ace8105-5135-4ab7-8dc4-7e5b276fc6a0": {"doc_hash": "0defaf4f2eb2c4f9a3ebbe8bde234a3ef8e46d1f52f9ea04caaf3b365226a275"}, "8bc0158a-bb67-456c-af8c-fcfc363569eb": {"doc_hash": "34bcf9a1eb7b0086a2a52aa73e6bee84e4898d22fcda8454de1a8c4b8987e5e5"}, "c65eeb41-7ed5-407b-9b54-d4588ee03c17": {"doc_hash": "3a51e91f3371c125031cd296a1bddbb05b83e2266cd7494a99834928ce974eb3"}, "59f80929-c45e-4356-b7c9-df3f36658842": {"doc_hash": "142ca4efcbe809f7af6441ea811dfb73588f12bb23b1d1d9d3578214d216ebcc"}, "0b0e75c0-a370-4fdc-9fce-818363573d60": {"doc_hash": "7dfe9372d9a882d952f911fdcbbc91589c8643f426142187047ef1c943ce1d7a"}, "33dc4a9f-b32b-4a27-bf61-ef33d1250337": {"doc_hash": "d93d55195e6b2a756918d0743486a42e5a803d7adb37067de8f5e1a9d3ceca50"}, "1ca2d8f1-05b3-48d5-b259-b4d68ee3fae1": {"doc_hash": "40329915fad492e5ed3e539a41070e23346f270e525633180c8cc9924e4bad74"}, "55a442f4-8340-4ee2-a4a3-d5e467baa885": {"doc_hash": "71604299816e01d8b19eeb5d499fe602c1550eda6a1244ee8813ffa9ecc32fda"}, "cac37684-2340-4de3-9881-e450cd54577f": {"doc_hash": "146add65889ba77d99a3a0852c4984993dd37e0d19c4e49971ca54a1f4360adb"}, "909b6967-6e74-4b2b-ac2e-76c6b0a8f4d1": {"doc_hash": "43b44df064dea7d32d7164588ef761a769b5b7ca5215bb021417065239cb05a5"}, "8d9428c0-8000-4b9d-862f-e9285e4bd500": {"doc_hash": "263ed49ac66c3a6dc2da84fbbab3e608c5341d048a856f46a50f1de5f165071a"}, "5a878885-a350-490e-8f34-b240bc055eba": {"doc_hash": "b031c5d0ae6004b8faa6d426e07329cfd8cfd01530d47d4e3e81f1cf0b8685bb"}, "a3a3c26d-0250-43f3-af88-b81fbd7777ad": {"doc_hash": "7673466e74f94958703a81648131111405a020f852c73a4514bc07acf31e2cfe"}, "219c3cea-3bfd-4e2a-b3eb-08cfd8c3fd7b": {"doc_hash": "36e7f07082137b8822e69f533daf14f8e21ad70823c6fe04cf1f34aef9dc857f"}, "6be6f343-8ae8-463c-929c-32d118881e3d": {"doc_hash": "673c0445ab0f7e2e157564260d03a4b342ff81d2b083c8bdce54b77e3aa573e8"}, "b3ea61ec-adb3-4c42-96d8-2b21b37569df": {"doc_hash": "b730a0e291a114e5ffe1374e6bfd3aa974783b21bd0f6606a97e6375830f7599"}, "1b58872b-38ea-49ed-946e-14984e05e15a": {"doc_hash": "12eb4340e0001002f26e9aa0600df09ee4a27b472e37f68fdf2fda505ef5d693"}, "35b5f125-0ff6-4705-aea5-3ffa73e865bf": {"doc_hash": "156fecc224f029f44f87b49fe760deb139ed62539404afb2fe80358d0a56dc91"}, "34083a14-1814-4a40-aff5-0c685ae3d616": {"doc_hash": "f1c688c2737641e62f3b46b5f695531f4e3a26af4393c1338afec38df36b6983"}, "2cbcdc83-1b04-4811-bb4d-4f29426ec0d0": {"doc_hash": "5b6a88063f175cf0ca8e2d4466b16bf8b7ec30b104c86e0399a11e44a3d35e4a"}, "56c10147-3cd4-40cc-9ff8-d9ec4e7353e0": {"doc_hash": "463b223270088fb7db379191387795a5199ce8e3ac164ce90d4797cadf581349"}, "2fc8dc94-f721-4351-a1b1-688862db6d76": {"doc_hash": "e6fcc8e788a4f8d11846690275c827e4a2347f65013e9bb0a8f1eada16094fa0"}, "294e8906-b2c0-4b42-89e5-a9aed21fcca5": {"doc_hash": "defc654ed2c878b9c1965eb470cefff790306f96e110b824d6292701204d7678"}, "9a09fc9e-b58d-4822-8566-1d2077645e0b": {"doc_hash": "09d758d36059c703663f50fdc42c0404b4c711f7caabbe6d3daa02aaab29e110"}, "aacd864d-17a5-4f85-8b8d-7648ed34a190": {"doc_hash": "071ccc14a90eb488c665bcb49f9e26aa05de2b49abcad2361952edf2c63a574c"}, "2f8aaba1-7384-40ef-a191-546411b04627": {"doc_hash": "b87ac6556090db340a87e61790d9593f8c80a66a82c2fcafd1758853f54d9bf9"}, "63422ac4-b245-4389-91bd-260cdd2b2f35": {"doc_hash": "c414775a026eaae566c3b3d0f16a13c2a7106edf15afa45f14ac4344ec883136"}, "1b1741d3-7748-4d99-a7c0-4889dbbb9edc": {"doc_hash": "babdcaee51de45aee953a82539c77fbd52eeff4e581922399a33dadd3a8586c3"}, "9b016c1d-c31b-453b-8680-705feb908e15": {"doc_hash": "9d62107a1e3f55f7f3b7daedee93c0f8cc027dfa792d7e02b19c016d8b136acc"}, "abbf6083-74f3-45d9-a693-93169636a5fe": {"doc_hash": "8a91c8f2a0a6956b2c933de4cfca94af03c01bdf13c8ce73a7a977083a1b0e06"}, "0022cbf7-1f20-421b-9b33-64151a5d1d23": {"doc_hash": "8aef0350ced148085e191b8924ad732349c85beff8ec0a947b67815bbbf081dd"}, "ced053d1-bd4a-41ba-a8db-21430bfd9252": {"doc_hash": "dd7e37f1dc737e734495c04fa87977c47425c423aa6b2f65d90e96b3846ad436"}, "d445f326-e45f-4238-bd9e-34f8de44edc6": {"doc_hash": "f8bd80870d9b5730fbf366e4df70b016d17fc93fb05a7b2aecedf8153d33ebf0"}, "c5999b43-0c4a-4343-99d8-077896fcb626": {"doc_hash": "1f1298c0a4e21fec9b4e0fe8a350cac3adc1c4007f33402ffdf755a5dd816b39"}, "5afc94f7-cc1b-48a6-ae9f-5b4c7425f34b": {"doc_hash": "25e783afcbe0e1831e5d630c6669ec3adb89d8d08c20886463c59373dec3726b"}, "481d25e1-5bba-4273-bae9-cf1aa643739e": {"doc_hash": "2f8df91e1fe1fd058262471cfda53b0ffc7fdf9e88ab12c55581394a67105b67"}, "d428bb84-fb71-45cb-8bee-ad22617292ec": {"doc_hash": "8feb56bb88622bedb7938e25562b1d8455a56e7947558cd3571a8cea5173873c"}, "5a2b739f-49da-4758-b04a-1d87aaead6c3": {"doc_hash": "92ace6397406d88369410d3a426b3d7adff8fa3efc138182e9c99f3cb412de98"}, "0ce64ad4-bfa1-4a43-9ddd-4640e08a02a7": {"doc_hash": "1da5c7985d35ce485bab339c545aad6696a8085d927975eb2c8347f606ec5e85"}, "0b0e162c-6a93-4257-9366-acd2432ca738": {"doc_hash": "9e4b28b3b3e7d8fbc85ca5fcf7fe6ae368bd9bbbfb4207acfca1ffad0476a1b6"}, "c50b84ce-553c-4edc-a78d-9e0e02005061": {"doc_hash": "04127c107b4ff3d1abdca5c380d46d3d42e2b23d9381c60ad81731dd33b9c04a"}, "49d97ceb-2281-4a7c-8dbb-3afb0baa3929": {"doc_hash": "2780fc3f9ccbdd671347ac80ab8ec1031f82281cfa7d625e93c84f5b8fa0bc90"}, "174217e8-8274-49ed-956f-bb31873a9ccf": {"doc_hash": "77c6ade49df084fd0a969ba0e1a86167eaf2a4aa57775a591ae2ec6d7211d676"}, "628afe8a-1d55-4545-9b4c-6adf4bc90774": {"doc_hash": "b8594186d824aafe76d4e026bf668c9d0dfe30eb7ea9f56fdbed312220a699d7"}, "0c7585ae-30fd-4183-b81f-e6cb538fc8b2": {"doc_hash": "35c7b4bf943a538c67ee91f0c5bebe68fce132d5ae7ec5750a82b16a5a80faa5"}, "bf92cfae-8b4e-40a1-ae9d-bc176b072f40": {"doc_hash": "33f7484271e4023babf08c8a1125f53f91b2aa7711334f9a28145e6cde235c07"}, "e65e5847-40f3-4631-8f6b-0342fc83c372": {"doc_hash": "95f9510d37d7c2e12f4de0db2e996234d27513568e6b6542586a04d176a6890d"}}}}